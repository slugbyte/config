history -c
clear
clear
ls
tmux
n /code/ziglings/
ls
ls -lah
ls
zig build
en
zig build
ls
zig build
xs asciitable
xs ascii
xs ascii | rg table
xs ascii
xs asciitable
ascii
ping example.com
xi ascii
ascii
n /code/ziglings/
ls
zig build
zig build 
zig bulid
zig build
zig bulid
zig build
zig bulid
zig build
zig bulid
zig build
en
zig build
ping example.com
ls
ls -lah
zig build
alias b = zig build
b
en
b
zig build
zig build run
b
ping example.com
b
j
b
en
b
man 2 math
man 2 math.h
man math.h
man math
man fmod
b
j
s
s
ls
a
git add .
git commit -a -m 'complete to 94'
s
git status
L
git log
s
git status
ls
ls -lah
n ~/.config/nushell/
ls
e config.nu
e ~/.config/nushell/config.nu
nu
nvim ~/.config/nushell/config.nu
tmux
let wat = (echo "hi")
echo $wat
let branch=(sh -c 'git rev-parse --abbrev-ref HEAD 2> /dev/null')
let branch=(sh -b 'git rev-parse --abbrev-ref HEAD 2> /dev/null')
let branch=(bash -c 'git rev-parse --abbrev-ref HEAD 2> /dev/null')
let branch = (bash -c 'git rev-parse --abbrev-ref HEAD 2> /dev/null')
echo $branch
help if
if $branch == "main" {<\n>echo "hi"<\n>}
clear
which a
s
a
s
a .
s
c 
c
a
c
gpg 
n ~/workspace/hide/
ls
n gpg
ls
gpg --import ./slugbyte.secret.asc
gpg --edit-key 0A56A83BE20DC703
gpg --edit-key 0A56A83BE20DC703 trust
ls
gpg --import ./slugbyte.public.asc
gpg --edit key 0A56A83BE20DC703 trust
gpg --edit-key 0A56A83BE20DC703 trust
clear
s
nn
cd ..
ls
s
a
c
s
cd ..
nn
cd plug/
git rev-parse --show-toplevel
cd
git rev-parse --show-toplevel
"".length
let wat = (git rev-parse --show-toplevel err> /dev/null)
echo $wat
echo $wat.length
if wat {<\n>echo "hi"<\n>}
if wat | is-empty {<\n>echo "hi"<\n>}
if ($wat | is-empty) {<\n>echo "hi"<\n>}
if ($wat | is-empty | !) {<\n>echo "hi"<\n>}
git rev-parse --show-toplevel err> /dev/null
git rev-parse --show-toplevel 
git rev-parse --show-toplevel err> /dev/null
git rev-parse --abbrev-ref HEAD err> /dev/null
git rev-parse --abbrev-ref HEAD 
true | not
git status
echo $env.LAST_EXIT_CODE
n workspace/
echo $env.LAST_EXIT_CODE
git status
echo $env.LAST_EXIT_CODE
2 == 3
type 
help type
$env.LAST_EXIT_CODE | describe
is_git_repo 
cd 
is_g
is_git_repo 
j
nu
eixt
nu
ls
n ~/.config/nushell/
ls
ls -lah
e git.nu
n ../nvim/
ls
J
ls
n ../nushell/
ls
source git.nu
cd /
ls
git_push
cd /
git_push
s
_git_is_repo 
git_push
if (_git_is_repo) != true {<\n>echo "wat"<\n>}
cd -
source git.nu
cd /
git_push
cd -
source git.nu
cd /
git_push
source help
help source
cd -
source git.nu
git_push
source git.nu
git_push
pwd
git branch
  git rev-parse --abbrev-ref HEAD err> /dev/null<\n>
_git_branch_name_get 
source git.nu
git_push
source git.nu
git_push
  let branch = (_git_branch_name_get)<\n>
$branch
_git_br
_git_branch_name_get 
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push 
  let branch = (_git_branch_name_get)<\n>
ls
echo $branch
ls
  git rev-parse --abbrev-ref HEAD err> /dev/null <\n>
help str
  git rev-parse --abbrev-ref HEAD err> /dev/null <\n>| str
  git rev-parse --abbrev-ref HEAD err> /dev/null | str
  git rev-parse --abbrev-ref HEAD err> /dev/null | str trim
null |str trim
"hi  "  | str trim
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
ls
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
git rev-parse --abbrev-ref HEAD err> /dev/null | str trim
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
_git_branch_name_get | describe 
_git_branch_name_get 
ls
git rev-parse --abbrev-ref HEAD 2> /dev/null
git rev-parse --abbrev-ref HEAD err> /dev/null
_git_branch_name_get 
source git.nu
git_push
null |str trim
git_push
source git.nu
git_push
source git.nu
git_push
source git.nu
git_push
ls ~/.config/git/
ls ~/.config/git/config
j
e /home/slugbyte/.config/git/config
man git
git config
git config --get
git config --get user.name
git_push
git remote -v
git remote --help
git remote remove origin
git remote add origin
git remote add origin git@github.com:slugbyte/config.git
git_push
s
clear
nu
nu
nu
e env.nu
s
cd
A
s
